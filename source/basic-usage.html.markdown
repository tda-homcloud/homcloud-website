---
title: 基本的な使い方
---
{::options parse_block_html="true" /}

# HomCloudの基本的な使い方

ここでは、

* [3次元点集合データ(ポイントクラウド)](#pointcloud)
* [白黒画像](#binary-image)

を解析する場合について解説します。

<div class="guide">
## <a name="pointcloud"> 3次元点集合データ(ポイントクラウド)の解析

まず、[pointcloud-example.zip](donwload/pointcloud-example.zip)をダウンロードし、
zipファイルを展開してください。すると pointcloud というディレクトリができますので、
ターミナルから `cd` コマンドでこのディレクトリに移動します。

ディレクトリには pointcloud.txt というファイルがあります。これは
一様ランダムに点を5000個撒き散らしたものです。これを解析してみましょう。

まず最初に、

    python3 -m homcloud.pc2diphacomplex -I -D -d 3 pointcloud.txt pointcloud.idiagram
    
とします。すると pointcloud.idiagram というファイルが生成されます。これが
パーシステント図の情報を収めたファイルです。`-d 3`というのが入力データの次元
(ここでは3)で、`pointcloud.txt` で入力データを、`pointcloud.idiagram`で出力データを
指定します。`-I`, `-D`というのはHomCloudの便利機能を有効にするもので常に指定しておくと
良いです。

### パーシステント図の可視化

次に、ここからパーシステント図をプロットしてみましょう。

    python3 -m homcloud.plot_diagram -d 1 pointcloud.idiagram
    
とします。ここで`-d 1`というのは1次のパーシステント図(つまりリングの情報)を
可視化することを意味します。`-d 2`とすると1次のパーシステント図(つまり空隙の情報)を
可視化します。すると以下のような画像が表示されます。

![PD1 pointcloud](images/pointcloud-pd1-1.png){: width="256"}

左下のほうに何かちょっと見えてあとは何も見えません。というのは
このデータは左下のほうにデータ(birth-death pair)が偏っているからです。
そこで色付けを log scale にしましょう。`-l` オプションを使います。

    python3 -m homcloud.plot_diagram -d 1 -l pointcloud.idiagram

すると以下のような図が表示されます。

![PD1 pointcloud](images/pointcloud-pd1-2.png){: width="256"}

基本的にはパーシステント図の点は対角線から離れるほど「意味のある」リング構造と対応し、
またY軸が大きい値になるほど大きなリング構造を表しています。
つまり(0.5, 0.7)のあたりにある点がこのランダムな点がなすリング構造のなかで最も
ちゃんとしたリング構造を持っているものと対応していると言えそうです。

ここで注意しておくと、パーシステント図のX、Y軸は点に貼り付ける球の半径と対応していると
よくある教科書には書かれています。HomCloudでは実はこれは半径の2乗が使われています。
つまり√0.5≒0.7と√0.7≒0.84が実際の半径になります。これは主には内部のアルゴリズムの都合に
よるものですが、各点に重みづけをしたときにはこのほうが自然に見えるという事情もあり、
HomCloudでは2乗の値が使われます。これを止めたいときはパーシステント図を
`homcloud.pc2diphacomplex` で計算するときに `--no-square` オプションを付けると
半径パラメータそのものがX、Y軸に現れます。

さて、次にbirth-death pairが集中している
左下の 0.0〜0.1 のあたりを拡大して調べてみましょう。
このときは以下のようなコマンドを使います。

    python3 -m homcloud.plot_diagram -d 1 -l -x "[0:0.1]" pointcloud.idiagram
    
`-x`オプションで範囲を指定します。以下のような図が表示されるでしょう。

![PD1 pointcloud](images/pointcloud-pd1-zoomup.png){: width="256"}

`-X`オプションで解像度を変えることができます。デフォルトでは
128x128でヒストグラムを描きますが、もっと細かく256x256にしてみましょう。
以下のコマンドです。

    python3 -m homcloud.plot_diagram -d 1 -l -x "[0:0.1]" -X 256 pointcloud.idiagram

![PD1 pointcloud](images/pointcloud-pd1-zoomup-fine.png){: width="256"}

これらの画像を保存するのには、表示されたウィンドウにあるフロッピーディスクの
アイコンをクリックします。ただ、これだと何枚も画像を保存したいときには
不便なのでターミナルのコマンドラインからウィンドウを出さずに保存する方法を
覚えましょう。`-o`オプションです。

    python3 -m homcloud.plot_diagram -d 1 -l -x "[0:0.1]" -X 256 pointcloud.idiagram -o pointcloud-pd1.png
    
これで`pointcloud-pd1.png`というファイルに保存されます。

### テキストデータでの解析
次にパーシステント図をテキストデータとして出力してみましょう。
計算したパーシステント図をさらに統計処理したい、といった場合には
テキスト出力をしてそれを使うのが手軽です。以下のコマンドです。

    python3 -m homcloud.diagram_to_text -d 1 pointcloud.idiagram
    
すると2列の数値データが出力されます。これは1次のbirth-death pairすべてを列挙していて、
左側の数値がbirth time、右側の数値がdeath timeです。これも
半径の2乗の値が出力されます。`-d 1`の所を`-d 2`にすると2次のbirth death pairが
出力されます。

さて、実際に利用するときにはファイルに保存したいでしょうから、`-o`オプションを使って
やってみましょう。

    python3 -m homcloud.diagram_to_text -d 1 pointcloud.idiagram -o pointcloud-pd1.txt

すると pointcloud-pd1.txt に1次のbirth-death pairの情報がテキストで保存されます。

### 簡単な逆解析について

パーシステント図の個々の点は何らかの意味で元のポイントクラウドのリング構造、空隙構造と
対応しているはずです。しかしそれがどのようなものであるのかを特定するのは実は
そんなに簡単ではないです。このような解析を逆解析と呼びます。HomCloudの
基本的な逆解析のツールであるbirth simplex、death simplexというものを使ってみましょう
(実はもっと強力な逆解析のツールもあるのですが、そちらは homcloud-advanced のほうに
含まれています)。birth/death simplexについては
[大林のサーベイ論文](https://doi.org/10.11540/bjsiam.26.4_7)が理解に有用です。
これには`homcloud.diagram_to_text`の`-S`オプションを使います。

    python3 -m homcloud.diagram_to_text -d 1 -S yes pointcloud.idiagram

すると以下のようなテキストデータが出力されます。

    0.0005037159143533377 0.0005579705552885796 {(0.957826751985,-1.02576376749,0.584557432918),(0.950995498828,-1.00684503611,0.544429148124)} {(0.957826751985,-1.02576376749,0.584557432918),(0.950995498828,-1.00684503611,0.544429148124),(0.949185316562,-1.0446271794,0.553072016288)}
    0.0009259080093991961 0.0009586588306071996 {(-0.339241447596,0.193383603721,0.0879432393893),(-0.285082787425,0.181717125153,0.113129839874)} {(-0.339241447596,0.193383603721,0.0879432393893),(-0.285082787425,0.181717125153,0.113129839874),(-0.340910140206,0.168486056354,0.0955091671374)}
      :
      
これの最初の2列はbirth time、death timeです。次の2つの列
(よく見ると、`{...} {...}`という形をしています)
がそれぞれbirth simplex、death simplexです。
これの最初の行は(0.0005037159143533377, 0.0005579705552885796)というbirth death pairに
対応するリング構造は、

    (0.957826751985,-1.02576376749,0.584557432918)
    (0.950995498828,-1.00684503611,0.544429148124)

の2つの点を結んだ辺が「現れた」タイミングで生じ、

    (0.957826751985,-1.02576376749,0.584557432918)
    (0.950995498828,-1.00684503611,0.544429148124)
    (0.949185316562,-1.0446271794,0.553072016288)
    
の3つの点を頂点とする3角形が「現れた」タイミングで消えたことを意味します。
上で上げたサーベイ論文が理解の助けになるでしょう。特に実際的なデータ解析では
death simplexのほうが重要です。death simplexの重心あたりがリング構造の
中心になることが多いと考えられるためです。この出力結果は`-o`オプションで
ファイルに保存できますのでそれをさらに解析することでリングの空間分布を調べる
ようなこともできます。

同じディレクトリにある`run.sh`は上で解説した
ことをまとめたシェルスクリプトです。これを動かすと上の計算が一通り行われ、いくつかの
画像やテキストファイルが出力されます。何か自分のデータを解析したい場合には
これを改造して使うとよいかもしれません。

以上で基本的な使い方の説明は終わりです。
</div>

<div class="guide">
## <a name="binary-image"> 白黒画像の解析
</div>
